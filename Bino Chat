<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bino Chat App</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-firestore-compat.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }

        .logo-dots-static {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            width: 30px;
            height: 10px;
            justify-content: space-between;
        }

        .logo-dots-static .dot {
            width: 8px;
            height: 8px;
            background-color: white;
            border-radius: 50%;
        }

        .splash-dot-pulse {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }

        .splash-dot-pulse-item {
            width: 10px;
            height: 10px;
            background-color: #2196f3;
            border-radius: 50%;
            margin: 0 5px;
            animation: dot-pulse 1s infinite ease-in-out;
        }

        .splash-dot-pulse-item:nth-child(2) {
            animation-delay: 0.2s;
        }

        .splash-dot-pulse-item:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes dot-pulse {
            0%, 100% {
                transform: scale(0.5);
                opacity: 0.5;
            }
            50% {
                transform: scale(1.2);
                opacity: 1;
            }
        }

        .chat-bubble {
            max-width: 75%;
            padding: 10px 15px;
            border-radius: 20px;
            margin-bottom: 10px;
            word-wrap: break-word;
        }

        .chat-bubble.sent {
            background-color: #2196f3;
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        .chat-bubble.received {
            background-color: #e5e7eb;
            color: #374151;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        
        .custom-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            max-width: 350px;
            width: 90%;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center">

    <!-- Page 1: Splash Screen -->
    <div id="splash-page" class="w-full h-screen flex flex-col items-center justify-center bg-white transition-opacity duration-500">
        <div class="relative w-24 h-24">
            <svg id="app-logo-svg" class="w-full h-full" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M50 0C22.3858 0 0 22.3858 0 50C0 69.317 11.238 86.417 28.0931 95.972C33.1534 98.8142 39.0601 100 45 100C46.8524 100 48.6833 99.8824 50.4905 99.6587L50.5 99.6586C60.4729 100 70.3601 97.4859 79.2562 92.6105C92.2039 85.3409 100 68.6186 100 50C100 22.3858 77.6142 0 50 0Z" fill="#2196F3"/>
                <circle cx="50" cy="50" r="38" fill="white"/>
                <path d="M50 15C33.4315 15 20 28.4315 20 45V60C20 63.3137 22.6863 66 26 66H74C77.3137 66 80 63.3137 80 60V45C80 28.4315 66.5685 15 50 15Z" fill="#2196F3"/>
                <circle cx="41" cy="45" r="4" fill="white"/>
                <circle cx="50" cy="45" r="4" fill="white"/>
                <circle cx="59" cy="45" r="4" fill="white"/>
            </svg>
        </div>
        <div class="splash-dot-pulse">
            <div class="splash-dot-pulse-item"></div>
            <div class="splash-dot-pulse-item"></div>
            <div class="splash-dot-pulse-item"></div>
        </div>
    </div>

    <!-- Page 2: Auth Page -->
    <div id="auth-page" class="hidden w-full max-w-sm p-8 bg-white rounded-3xl shadow-2xl transition-opacity duration-500">
        <h2 class="text-4xl font-extrabold text-center text-blue-600 mb-2">Bino Chat</h2>
        <p class="text-center text-gray-500 mb-8">Connect with your friends, easily!</p>

        <!-- Signup Form -->
        <div id="signup-form-page">
            <form id="signup-form" class="space-y-6">
                <div>
                    <label for="signup-name" class="block text-sm font-semibold text-gray-700 mb-2">Name</label>
                    <input type="text" id="signup-name" placeholder="Enter your name" required class="w-full p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200">
                </div>
                <div>
                    <label for="signup-email" class="block text-sm font-semibold text-gray-700 mb-2">Email</label>
                    <input type="email" id="signup-email" placeholder="Enter your email" required class="w-full p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200">
                </div>
                <div>
                    <label for="signup-password" class="block text-sm font-semibold text-gray-700 mb-2">Password</label>
                    <input type="password" id="signup-password" placeholder="Enter a password" required class="w-full p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200">
                </div>
                <button type="submit" class="w-full bg-blue-600 text-white font-bold py-3 rounded-xl shadow-lg hover:bg-blue-700 transition duration-300 transform hover:scale-105">
                    Sign Up
                </button>
            </form>
            <p class="mt-6 text-center text-gray-600">
                Already have an account?
                <a href="#" id="show-login-link" class="text-blue-600 font-bold hover:underline">Log in</a>
            </p>
        </div>

        <!-- Login Form -->
        <div id="login-form-page" class="hidden">
            <form id="login-form" class="space-y-6">
                <div>
                    <label for="login-email" class="block text-sm font-semibold text-gray-700 mb-2">Email</label>
                    <input type="email" id="login-email" placeholder="Enter your email" required class="w-full p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200">
                </div>
                <div>
                    <label for="login-password" class="block text-sm font-semibold text-gray-700 mb-2">Password</label>
                    <input type="password" id="login-password" placeholder="Enter your password" required class="w-full p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200">
                </div>
                <button type="submit" class="w-full bg-blue-600 text-white font-bold py-3 rounded-xl shadow-lg hover:bg-blue-700 transition duration-300 transform hover:scale-105">
                    Log In
                </button>
            </form>
            <p class="mt-6 text-center text-gray-600">
                Don't have an account?
                <a href="#" id="show-signup-link" class="text-blue-600 font-bold hover:underline">Sign Up</a>
            </p>
        </div>
    </div>

    <!-- Page 3: Main App Page (Friend List) -->
    <div id="main-page" class="hidden w-full max-w-md bg-white rounded-xl shadow-lg h-screen flex flex-col">
        <!-- Header -->
        <header class="p-4 flex items-center justify-between">
            <div class="flex items-center space-x-2">
                <div class="relative w-8 h-8">
                    <svg id="header-logo-svg" class="w-full h-full" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M50 0C22.3858 0 0 22.3858 0 50C0 69.317 11.238 86.417 28.0931 95.972C33.1534 98.8142 39.0601 100 45 100C46.8524 100 48.6833 99.8824 50.4905 99.6587L50.5 99.6586C60.4729 100 70.3601 97.4859 79.2562 92.6105C92.2039 85.3409 100 68.6186 100 50C100 22.3858 77.6142 0 50 0Z" fill="#2196F3"/>
                        <circle cx="50" cy="50" r="38" fill="white"/>
                        <path d="M50 15C33.4315 15 20 28.4315 20 45V60C20 63.3137 22.6863 66 26 66H74C77.3137 66 80 63.3137 80 60V45C80 28.4315 66.5685 15 50 15Z" fill="#2196F3"/>
                        <circle cx="41" cy="45" r="4" fill="white"/>
                        <circle cx="50" cy="45" r="4" fill="white"/>
                        <circle cx="59" cy="45" r="4" fill="white"/>
                    </svg>
                </div>
                <span class="text-2xl font-bold text-blue-600">Bino</span>
            </div>
            <button id="profile-menu-btn" class="text-blue-500 hover:text-blue-700 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                </svg>
            </button>
        </header>
        <div class="h-0.5 bg-blue-200 mx-4"></div>

        <!-- Main Content -->
        <main class="flex-grow p-4 overflow-y-auto">
            <button id="add-friend-btn" class="w-full bg-blue-600 text-white font-semibold py-3 rounded-lg shadow hover:bg-blue-700 transition duration-300 mb-4">
                Add Friend
            </button>
            <div id="friend-list-container" class="space-y-3">
                <!-- Friends will be displayed here -->
            </div>
        </main>
    </div>

    <!-- Pop-up Modal: Add Friend -->
    <div id="add-friend-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm">
            <h3 class="text-xl font-bold mb-4 text-blue-600">Find Friend</h3>
            <div class="relative mb-4">
                <input type="email" id="search-email-input" placeholder="Enter email..." class="w-full p-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </div>
            <button id="find-user-btn" class="w-full bg-blue-600 text-white font-semibold py-3 rounded-lg shadow hover:bg-blue-700 transition duration-300 mb-4">
                Find
            </button>
            <div id="search-results-list" class="space-y-2">
                <!-- Search results will be displayed here -->
            </div>
            <button id="close-add-friend-modal" class="w-full mt-4 bg-gray-200 text-gray-800 font-semibold py-3 rounded-lg hover:bg-gray-300 transition duration-300">
                Close
            </button>
        </div>
    </div>
    
    <!-- Page 4: Chat Page -->
    <div id="chat-page" class="fixed inset-0 bg-white z-50 flex flex-col hidden">
        <!-- Chat Header -->
        <header class="p-4 flex items-center justify-between border-b border-gray-200">
            <div class="flex items-center space-x-4">
                <button id="back-from-chat-btn" class="text-blue-500 font-semibold focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <img id="chat-partner-pic" src="" alt="Profile" class="w-10 h-10 rounded-full object-cover">
                <div>
                    <span id="chat-partner-name" class="font-bold text-lg">Chat Partner</span>
                    <div class="flex items-center space-x-1">
                        <div id="chat-partner-status-dot" class="w-2.5 h-2.5 rounded-full"></div>
                        <span id="chat-partner-status-text" class="text-xs text-gray-500"></span>
                    </div>
                </div>
            </div>
            <button id="chat-menu-btn" class="text-blue-500 hover:text-blue-700 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                </svg>
            </button>
            <div id="chat-menu-popup" class="absolute top-16 right-4 w-40 bg-white rounded-lg shadow-xl py-2 hidden">
                <button id="delete-chat-btn" class="w-full text-left px-4 py-2 text-red-500 hover:bg-gray-100">
                    Delete Chat
                </button>
            </div>
        </header>

        <!-- Chat Body (Messages) -->
        <main id="chat-messages" class="flex-grow p-4 overflow-y-auto flex flex-col space-y-2">
            <!-- Chat messages will be displayed here -->
        </main>

        <!-- Chat Input -->
        <div class="p-4 border-t border-gray-200 flex items-center space-x-2">
            <input type="text" id="chat-input" placeholder="Type a message..." class="flex-grow p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400">
            <button id="send-btn" class="bg-blue-600 text-white p-3 rounded-full shadow hover:bg-blue-700 transition duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
            </button>
        </div>
    </div>

    <!-- Page 5: Profile Settings Pop-up -->
    <div id="profile-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm">
            <h3 class="text-xl font-bold mb-4 text-blue-600">Profile Settings</h3>
            <div class="flex items-center space-x-4 mb-4">
                <img id="profile-pic-preview" src="" alt="Profile Picture" class="w-20 h-20 rounded-full object-cover border-2 border-blue-500">
                <label for="profile-pic-input" class="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-blue-700 transition duration-300">
                    Change Picture
                </label>
                <input type="file" id="profile-pic-input" class="hidden" accept="image/*">
            </div>
            <div class="mb-4">
                <label for="profile-name-input" class="block text-gray-700 font-semibold mb-2">Name</label>
                <input type="text" id="profile-name-input" placeholder="Enter your name..." class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400">
            </div>
            <button id="save-profile-btn" class="w-full bg-blue-600 text-white font-semibold py-3 rounded-lg shadow hover:bg-blue-700 transition duration-300">
                Save
            </button>
            <button id="close-profile-modal" class="w-full mt-2 bg-gray-200 text-gray-800 font-semibold py-3 rounded-lg hover:bg-gray-300 transition duration-300">
                Close
            </button>
        </div>
    </div>

    <!-- Custom Alert/Confirmation Modal -->
    <div id="custom-alert-modal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4 z-[10000] hidden">
        <div class="custom-modal">
            <h4 id="custom-alert-title" class="font-bold text-lg"></h4>
            <p id="custom-alert-message" class="text-gray-700"></p>
            <div class="flex justify-end space-x-2">
                <button id="custom-alert-cancel" class="hidden px-4 py-2 text-gray-600 rounded-lg hover:bg-gray-200">Cancel</button>
                <button id="custom-alert-ok" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">OK</button>
            </div>
        </div>
    </div>

    <script>
        // Firebase configuration
       const firebaseConfig = {
  apiKey: "AIzaSyCNAAZtNCa-46EnCsWDj2Updqbz7Bpvziw",
  authDomain: "bino-chat-ea5ca.firebaseapp.com",
  projectId: "bino-chat-ea5ca",
  storageBucket: "bino-chat-ea5ca.firebasestorage.app",
  messagingSenderId: "407737287355",
  appId: "1:407737287355:web:b4ff0883a0145b6b595f9e",
  measurementId: "G-FYBZ4P10EB"
};

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();

        // Pages and Modals
        const splashPage = document.getElementById('splash-page');
        const authPage = document.getElementById('auth-page');
        const signupFormPage = document.getElementById('signup-form-page');
        const loginFormPage = document.getElementById('login-form-page');
        const mainPage = document.getElementById('main-page');
        const addFriendModal = document.getElementById('add-friend-modal');
        const profileModal = document.getElementById('profile-modal');
        const chatPage = document.getElementById('chat-page');
        const chatMenuPopup = document.getElementById('chat-menu-popup');
        const customAlertModal = document.getElementById('custom-alert-modal');
        const customAlertTitle = document.getElementById('custom-alert-title');
        const customAlertMessage = document.getElementById('custom-alert-message');
        const customAlertOkBtn = document.getElementById('custom-alert-ok');
        const customAlertCancelBtn = document.getElementById('custom-alert-cancel');

        // Buttons and Inputs
        const showLoginLink = document.getElementById('show-login-link');
        const showSignupLink = document.getElementById('show-signup-link');
        const signupForm = document.getElementById('signup-form');
        const loginForm = document.getElementById('login-form');
        const addFriendBtn = document.getElementById('add-friend-btn');
        const closeAddFriendModalBtn = document.getElementById('close-add-friend-modal');
        const findUserBtn = document.getElementById('find-user-btn');
        const profileMenuBtn = document.getElementById('profile-menu-btn');
        const closeProfileModalBtn = document.getElementById('close-profile-modal');
        const saveProfileBtn = document.getElementById('save-profile-btn');
        const searchEmailInput = document.getElementById('search-email-input');
        const searchResultsList = document.getElementById('search-results-list');
        const backFromChatBtn = document.getElementById('back-from-chat-btn');
        const profilePicInput = document.getElementById('profile-pic-input');
        const profilePicPreview = document.getElementById('profile-pic-preview');
        const profileNameInput = document.getElementById('profile-name-input');
        const chatPartnerName = document.getElementById('chat-partner-name');
        const chatPartnerPic = document.getElementById('chat-partner-pic');
        const chatPartnerStatusDot = document.getElementById('chat-partner-status-dot');
        const chatPartnerStatusText = document.getElementById('chat-partner-status-text');
        const chatMessagesContainer = document.getElementById('chat-messages');
        const chatInput = document.getElementById('chat-input');
        const sendBtn = document.getElementById('send-btn');
        const chatMenuBtn = document.getElementById('chat-menu-btn');
        const deleteChatBtn = document.getElementById('delete-chat-btn');
        
        // Demo user data
        const newLogoSvgString = `<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M50 0C22.3858 0 0 22.3858 0 50C0 69.317 11.238 86.417 28.0931 95.972C33.1534 98.8142 39.0601 100 45 100C46.8524 100 48.6833 99.8824 50.4905 99.6587L50.5 99.6586C60.4729 100 70.3601 97.4859 79.2562 92.6105C92.2039 85.3409 100 68.6186 100 50C100 22.3858 77.6142 0 50 0Z" fill="#2196F3"/><circle cx="50" cy="50" r="38" fill="white"/><path d="M50 15C33.4315 15 20 28.4315 20 45V60C20 63.3137 22.6863 66 26 66H74C77.3137 66 80 63.3137 80 60V45C80 28.4315 66.5685 15 50 15Z" fill="#2196F3"/><circle cx="41" cy="45" r="4" fill="white"/><circle cx="50" cy="45" r="4" fill="white"/><circle cx="59" cy="45" r="4" fill="white"/></svg>`;
        const defaultProfilePicURL = `data:image/svg+xml;utf8,${encodeURIComponent(newLogoSvgString)}`;

        const binoChatUser = {
            name: "Bino Chat",
            email: "binochat@gmail.com",
            profilePic: defaultProfilePicURL,
            status: "Online"
        };
        
        const binoReplies = [
            "Hello! I am Bino Chat. How can I assist you today?",
            "That's a great message! Feel free to explore the app.",
            "This is a demo chat. You can add more friends using their email.",
            "Thanks for the message! I'm always here to help.",
            "The app has a new look, hope you like it!"
        ];

        let currentUser = null;
        let currentChatPartner = null;
        let unsubscribeFriends = null;
        let unsubscribeMessages = null;

        // Custom alert/confirm function
        function customAlert(title, message, isConfirm = false) {
            return new Promise((resolve) => {
                customAlertTitle.textContent = title;
                customAlertMessage.textContent = message;
                customAlertModal.classList.remove('hidden');

                if (isConfirm) {
                    customAlertCancelBtn.classList.remove('hidden');
                } else {
                    customAlertCancelBtn.classList.add('hidden');
                }

                const handleOk = () => {
                    customAlertModal.classList.add('hidden');
                    customAlertOkBtn.removeEventListener('click', handleOk);
                    customAlertCancelBtn.removeEventListener('click', handleCancel);
                    resolve(true);
                };

                const handleCancel = () => {
                    customAlertModal.classList.add('hidden');
                    customAlertOkBtn.removeEventListener('click', handleOk);
                    customAlertCancelBtn.removeEventListener('click', handleCancel);
                    resolve(false);
                };

                customAlertOkBtn.addEventListener('click', handleOk);
                customAlertCancelBtn.addEventListener('click', handleCancel);
            });
        }

        // Helper functions
        const showPage = (page) => {
            [splashPage, authPage, mainPage, chatPage].forEach(p => {
                p.classList.add('hidden');
                p.classList.remove('flex');
            });
            page.classList.remove('hidden');
            page.classList.add('flex');
            [addFriendModal, profileModal, chatMenuPopup, customAlertModal].forEach(m => m.classList.add('hidden'));
        };

        const showSignupForm = () => {
            signupFormPage.classList.remove('hidden');
            loginFormPage.classList.add('hidden');
        };

        const showLoginForm = () => {
            signupFormPage.classList.add('hidden');
            loginFormPage.classList.remove('hidden');
        };
        
        const getUserStatus = (email) => {
            if (email === binoChatUser.email) return "Online";
            return Math.random() > 0.5 ? "Online" : "Offline";
        };

        // Firebase functions
        const createUserInFirestore = async (userId, userData) => {
            try {
                await db.collection('users').doc(userId).set({
                    name: userData.name,
                    email: userData.email,
                    profilePic: userData.profilePic || defaultProfilePicURL,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                return true;
            } catch (error) {
                console.error("Error creating user in Firestore:", error);
                return false;
            }
        };

        const updateUserInFirestore = async (userId, updates) => {
            try {
                await db.collection('users').doc(userId).update(updates);
                return true;
            } catch (error) {
                console.error("Error updating user in Firestore:", error);
                return false;
            }
        };

        const getUserFromFirestore = async (userId) => {
            try {
                const doc = await db.collection('users').doc(userId).get();
                if (doc.exists) {
                    return doc.data();
                }
                return null;
            } catch (error) {
                console.error("Error getting user from Firestore:", error);
                return null;
            }
        };

        const getUserByEmail = async (email) => {
            try {
                const snapshot = await db.collection('users').where('email', '==', email).limit(1).get();
                if (!snapshot.empty) {
                    const doc = snapshot.docs[0];
                    return { id: doc.id, ...doc.data() };
                }
                return null;
            } catch (error) {
                console.error("Error getting user by email:", error);
                return null;
            }
        };

        const addFriend = async (userId, friendId) => {
            try {
                await db.collection('friendships').add({
                    user1: userId,
                    user2: friendId,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                return true;
            } catch (error) {
                console.error("Error adding friend:", error);
                return false;
            }
        };

        const getFriends = async (userId) => {
            try {
                const friends = [];
                
                // Get friendships where user is user1
                const snapshot1 = await db.collection('friendships')
                    .where('user1', '==', userId)
                    .get();
                
                snapshot1.forEach(doc => {
                    friends.push(doc.data().user2);
                });
                
                // Get friendships where user is user2
                const snapshot2 = await db.collection('friendships')
                    .where('user2', '==', userId)
                    .get();
                
                snapshot2.forEach(doc => {
                    friends.push(doc.data().user1);
                });
                
                // Get user data for all friends
                const friendsData = [];
                for (const friendId of friends) {
                    if (friendId === 'bino-chat-demo') {
                        friendsData.push(binoChatUser);
                    } else {
                        const userData = await getUserFromFirestore(friendId);
                        if (userData) {
                            friendsData.push(userData);
                        }
                    }
                }
                
                return friendsData;
            } catch (error) {
                console.error("Error getting friends:", error);
                return [];
            }
        };

        const subscribeToFriends = (userId, callback) => {
            // For real-time updates, we would set up listeners for both sides of the friendship
            // For simplicity, we'll just call the callback with the current friends list
            getFriends(userId).then(friends => {
                callback(friends);
            });
            
            // In a real app, you would return the unsubscribe functions for both listeners
            return () => {};
        };

        const sendMessageToFirestore = async (senderId, receiverId, messageText) => {
            try {
                // Create a chat ID that's the same for both users
                const chatId = [senderId, receiverId].sort().join('_');
                
                await db.collection('messages').add({
                    chatId,
                    senderId,
                    receiverId,
                    text: messageText,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp()
                });
                
                return true;
            } catch (error) {
                console.error("Error sending message:", error);
                return false;
            }
        };

        const getMessages = async (userId, partnerId) => {
            try {
                const chatId = [userId, partnerId].sort().join('_');
                const snapshot = await db.collection('messages')
                    .where('chatId', '==', chatId)
                    .orderBy('timestamp')
                    .get();
                
                const messages = [];
                snapshot.forEach(doc => {
                    messages.push(doc.data());
                });
                
                return messages;
            } catch (error) {
                console.error("Error getting messages:", error);
                return [];
            }
        };

        const subscribeToMessages = (userId, partnerId, callback) => {
            const chatId = [userId, partnerId].sort().join('_');
            
            return db.collection('messages')
                .where('chatId', '==', chatId)
                .orderBy('timestamp')
                .onSnapshot(snapshot => {
                    const messages = [];
                    snapshot.forEach(doc => {
                        messages.push(doc.data());
                    });
                    callback(messages);
                });
        };

        const deleteMessages = async (userId, partnerId) => {
            try {
                const chatId = [userId, partnerId].sort().join('_');
                const snapshot = await db.collection('messages')
                    .where('chatId', '==', chatId)
                    .get();
                
                const batch = db.batch();
                snapshot.forEach(doc => {
                    batch.delete(doc.ref);
                });
                
                await batch.commit();
                return true;
            } catch (error) {
                console.error("Error deleting messages:", error);
                return false;
            }
        };

        // UI functions
        const renderFriendList = (friends) => {
            const friendListContainer = document.getElementById('friend-list-container');
            friendListContainer.innerHTML = '';
            
            if (friends.length === 0) {
                friendListContainer.innerHTML = '<p class="text-center text-gray-500">You don\'t have any friends yet.</p>';
            }

            friends.forEach(friend => {
                const friendStatus = getUserStatus(friend.email);
                const statusColor = friendStatus === 'Online' ? 'bg-green-500' : 'bg-red-500';

                const friendCard = document.createElement('div');
                friendCard.className = 'flex items-center space-x-4 bg-gray-50 p-3 rounded-lg shadow-sm cursor-pointer hover:bg-gray-100 transition duration-150';
                friendCard.innerHTML = `
                    <img src="${friend.profilePic}" alt="Profile" class="w-12 h-12 rounded-full object-cover">
                    <div>
                        <span class="font-semibold text-gray-800">${friend.name}</span>
                        <div class="flex items-center space-x-1">
                            <div class="w-2 h-2 rounded-full ${statusColor}"></div>
                            <span class="text-xs text-gray-500">${friendStatus}</span>
                        </div>
                    </div>
                `;
                friendCard.addEventListener('click', () => {
                    openChat(friend);
                });
                friendListContainer.appendChild(friendCard);
            });
        };
        
        const openChat = (friend) => {
            currentChatPartner = friend;
            const friendStatus = getUserStatus(friend.email);
            const statusColor = friendStatus === 'Online' ? 'bg-green-500' : 'bg-red-500';
            
            chatPartnerName.textContent = friend.name;
            chatPartnerPic.src = friend.profilePic;
            chatPartnerStatusDot.className = `w-2.5 h-2.5 rounded-full ${statusColor}`;
            chatPartnerStatusText.textContent = friendStatus;
            
            showPage(chatPage);
            
            // Unsubscribe from previous message listener if it exists
            if (unsubscribeMessages) {
                unsubscribeMessages();
            }
            
            // Subscribe to new messages
            unsubscribeMessages = subscribeToMessages(
                currentUser.uid, 
                friend.id || 'bino-chat-demo', 
                renderChatMessages
            );
        };

        const renderChatMessages = (messages) => {
            chatMessagesContainer.innerHTML = '';
            if (!currentChatPartner) return;

            messages.forEach(msg => {
                const isSent = msg.senderId === currentUser.uid;
                const bubble = document.createElement('div');
                bubble.className = `chat-bubble ${isSent ? 'sent' : 'received'}`;
                bubble.textContent = msg.text;
                chatMessagesContainer.appendChild(bubble);
            });
            
            // Scroll to bottom
            setTimeout(() => {
                chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
            }, 100);
        };

        const sendMessage = async () => {
            const messageText = chatInput.value.trim();
            if (messageText && currentChatPartner) {
                const partnerId = currentChatPartner.id || 'bino-chat-demo';
                
                // Add message to Firestore
                const success = await sendMessageToFirestore(
                    currentUser.uid,
                    partnerId,
                    messageText
                );
                
                if (success) {
                    chatInput.value = '';
                    
                    // Bino Chat auto-reply (random message)
                    if (currentChatPartner.email === binoChatUser.email) {
                        setTimeout(() => {
                            const randomIndex = Math.floor(Math.random() * binoReplies.length);
                            const reply = binoReplies[randomIndex];
                            sendMessageToFirestore(
                                'bino-chat-demo',
                                currentUser.uid,
                                reply
                            );
                        }, 2000);
                    }
                } else {
                    customAlert("Error", "Failed to send message. Please try again.");
                }
            }
        };

        // Event Listeners
        window.addEventListener('load', () => {
            // Check if user is already logged in
            auth.onAuthStateChanged(async (user) => {
                if (user) {
                    // User is signed in
                    const userData = await getUserFromFirestore(user.uid);
                    if (userData) {
                        currentUser = {
                            uid: user.uid,
                            ...userData
                        };
                        
                        showPage(mainPage);
                        
                        // Set up real-time friend list updates
                        if (unsubscribeFriends) {
                            unsubscribeFriends();
                        }
                        
                        unsubscribeFriends = subscribeToFriends(
                            user.uid, 
                            renderFriendList
                        );
                    } else {
                        // User data not found in Firestore, sign out
                        await auth.signOut();
                        showPage(authPage);
                        showSignupForm();
                    }
                } else {
                    // No user is signed in
                    setTimeout(() => {
                        splashPage.classList.add('opacity-0');
                        setTimeout(() => {
                            showPage(authPage);
                            authPage.classList.add('opacity-100');
                            showSignupForm();
                        }, 500);
                    }, 2000);
                }
            });
        });

        showLoginLink.addEventListener('click', (e) => {
            e.preventDefault();
            showLoginForm();
        });

        showSignupLink.addEventListener('click', (e) => {
            e.preventDefault();
            showSignupForm();
        });

        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = document.getElementById('signup-name').value;
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;

            try {
                // Create user in Firebase Authentication
                const userCredential = await auth.createUserWithEmailAndPassword(email, password);
                const user = userCredential.user;
                
                // Create user in Firestore
                const userData = {
                    name,
                    email,
                    profilePic: defaultProfilePicURL
                };
                
                const success = await createUserInFirestore(user.uid, userData);
                
                if (success) {
                    currentUser = {
                        uid: user.uid,
                        ...userData
                    };
                    
                    // Add Bino Chat as a friend by default
                    await addFriend(user.uid, 'bino-chat-demo');
                    
                    showPage(mainPage);
                    
                    // Set up real-time friend list updates
                    if (unsubscribeFriends) {
                        unsubscribeFriends();
                    }
                    
                    unsubscribeFriends = subscribeToFriends(
                        user.uid, 
                        renderFriendList
                    );
                } else {
                    await auth.signOut();
                    customAlert("Error", "Failed to create user. Please try again.");
                }
            } catch (error) {
                console.error("Signup error:", error);
                let errorMessage = "An error occurred during signup.";
                
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = "This email is already registered.";
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = "Password should be at least 6 characters.";
                }
                
                customAlert("Signup Failed", errorMessage);
            }
        });

        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;

            try {
                const userCredential = await auth.signInWithEmailAndPassword(email, password);
                const user = userCredential.user;
                
                // Get user data from Firestore
                const userData = await getUserFromFirestore(user.uid);
                
                if (userData) {
                    currentUser = {
                        uid: user.uid,
                        ...userData
                    };
                    
                    showPage(mainPage);
                    
                    // Set up real-time friend list updates
                    if (unsubscribeFriends) {
                        unsubscribeFriends();
                    }
                    
                    unsubscribeFriends = subscribeToFriends(
                        user.uid, 
                        renderFriendList
                    );
                } else {
                    await auth.signOut();
                    customAlert("Error", "User data not found. Please sign up again.");
                }
            } catch (error) {
                console.error("Login error:", error);
                let errorMessage = "Invalid email or password.";
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = "No account found with this email.";
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = "Incorrect password.";
                }
                
                customAlert("Login Failed", errorMessage);
            }
        });

        addFriendBtn.addEventListener('click', () => {
            addFriendModal.classList.remove('hidden');
        });

        closeAddFriendModalBtn.addEventListener('click', () => {
            addFriendModal.classList.add('hidden');
        });

        findUserBtn.addEventListener('click', async () => {
            const query = searchEmailInput.value.toLowerCase().trim();
            searchResultsList.innerHTML = '';
            
            if (!query) {
                searchResultsList.innerHTML = '<p class="text-center text-gray-500">Please enter an email.</p>';
                return;
            }
            
            // Special case for Bino Chat
            if (query === binoChatUser.email) {
                const friendStatus = getUserStatus(binoChatUser.email);
                const statusColor = friendStatus === 'Online' ? 'bg-green-500' : 'bg-red-500';

                const resultCard = document.createElement('div');
                resultCard.className = 'flex items-center space-x-4 p-3 rounded-lg shadow-sm bg-blue-50 cursor-pointer hover:bg-blue-100 transition duration-150';
                resultCard.innerHTML = `
                    <img src="${binoChatUser.profilePic}" alt="Profile" class="w-12 h-12 rounded-full object-cover">
                    <div class="flex-grow">
                        <span class="font-semibold text-gray-800">${binoChatUser.name}</span>
                        <div class="flex items-center space-x-1">
                            <div class="w-2 h-2 rounded-full ${statusColor}"></div>
                            <span class="text-xs text-gray-500">${friendStatus}</span>
                        </div>
                    </div>
                `;
                resultCard.addEventListener('click', async () => {
                    // Check if already friends
                    const friends = await getFriends(currentUser.uid);
                    const isAlreadyFriend = friends.some(f => f.email === binoChatUser.email);
                    
                    if (isAlreadyFriend) {
                        customAlert("Already Added", `${binoChatUser.name} is already in your friends list.`);
                    } else {
                        // Add Bino Chat as friend
                        const success = await addFriend(currentUser.uid, 'bino-chat-demo');
                        if (success) {
                            customAlert("Success", `${binoChatUser.name} has been added to your friends list.`);
                            addFriendModal.classList.add('hidden');
                            
                            // Refresh friend list
                            if (unsubscribeFriends) {
                                unsubscribeFriends();
                            }
                            
                            unsubscribeFriends = subscribeToFriends(
                                currentUser.uid, 
                                renderFriendList
                            );
                        } else {
                            customAlert("Error", "Failed to add friend. Please try again.");
                        }
                    }
                    
                    searchEmailInput.value = '';
                    searchResultsList.innerHTML = '';
                });
                searchResultsList.appendChild(resultCard);
                return;
            }
            
            // Search for regular users
            const user = await getUserByEmail(query);
            
            if (user && user.id !== currentUser.uid) {
                const friendStatus = getUserStatus(user.email);
                const statusColor = friendStatus === 'Online' ? 'bg-green-500' : 'bg-red-500';

                const resultCard = document.createElement('div');
                resultCard.className = 'flex items-center space-x-4 p-3 rounded-lg shadow-sm bg-blue-50 cursor-pointer hover:bg-blue-100 transition duration-150';
                resultCard.innerHTML = `
                    <img src="${user.profilePic || defaultProfilePicURL}" alt="Profile" class="w-12 h-12 rounded-full object-cover">
                    <div class="flex-grow">
                        <span class="font-semibold text-gray-800">${user.name}</span>
                        <div class="flex items-center space-x-1">
                            <div class="w-2 h-2 rounded-full ${statusColor}"></div>
                            <span class="text-xs text-gray-500">${friendStatus}</span>
                        </div>
                    </div>
                `;
                resultCard.addEventListener('click', async () => {
                    // Check if already friends
                    const friends = await getFriends(currentUser.uid);
                    const isAlreadyFriend = friends.some(f => f.email === user.email);
                    
                    if (isAlreadyFriend) {
                        customAlert("Already Added", `${user.name} is already in your friends list.`);
                    } else {
                        // Add friend
                        const success = await addFriend(currentUser.uid, user.id);
                        if (success) {
                            customAlert("Success", `${user.name} has been added to your friends list.`);
                            addFriendModal.classList.add('hidden');
                            
                            // Refresh friend list
                            if (unsubscribeFriends) {
                                unsubscribeFriends();
                            }
                            
                            unsubscribeFriends = subscribeToFriends(
                                currentUser.uid, 
                                renderFriendList
                            );
                        } else {
                            customAlert("Error", "Failed to add friend. Please try again.");
                        }
                    }
                    
                    searchEmailInput.value = '';
                    searchResultsList.innerHTML = '';
                });
                searchResultsList.appendChild(resultCard);
            } else {
                searchResultsList.innerHTML = '<p class="text-center text-gray-500">No user found with this email.</p>';
            }
        });
        
        profileMenuBtn.addEventListener('click', async () => {
            const userData = await getUserFromFirestore(currentUser.uid);
            if (userData) {
                profileNameInput.value = userData.name;
                profilePicPreview.src = userData.profilePic || defaultProfilePicURL;
                profileModal.classList.remove('hidden');
            }
        });

        closeProfileModalBtn.addEventListener('click', () => {
            profileModal.classList.add('hidden');
        });

        backFromChatBtn.addEventListener('click', () => {
            // Unsubscribe from messages when leaving chat
            if (unsubscribeMessages) {
                unsubscribeMessages();
                unsubscribeMessages = null;
            }
            
            showPage(mainPage);
        });
        
        chatMenuBtn.addEventListener('click', () => {
            chatMenuPopup.classList.toggle('hidden');
        });

        deleteChatBtn.addEventListener('click', async () => {
            const confirmed = await customAlert("Confirm Delete", "Are you sure you want to delete this chat history?", true);
            if (confirmed && currentChatPartner) {
                const partnerId = currentChatPartner.id || 'bino-chat-demo';
                const success = await deleteMessages(currentUser.uid, partnerId);
                
                if (success) {
                    chatMenuPopup.classList.add('hidden');
                    customAlert("Chat Deleted", "The chat history has been successfully deleted.");
                } else {
                    customAlert("Error", "Failed to delete chat history. Please try again.");
                }
            }
        });

        saveProfileBtn.addEventListener('click', async () => {
            const newName = profileNameInput.value.trim();
            const newPic = profilePicPreview.src;

            if (!newName) {
                customAlert("Error", "Please enter a valid name.");
                return;
            }

            const updates = {
                name: newName,
                profilePic: newPic
            };

            const success = await updateUserInFirestore(currentUser.uid, updates);
            
            if (success) {
                currentUser.name = newName;
                currentUser.profilePic = newPic;
                profileModal.classList.add('hidden');
                customAlert("Profile Updated", "Your profile has been updated successfully.");
                
                // Refresh friend list to show updated name/pic
                if (unsubscribeFriends) {
                    unsubscribeFriends();
                }
                
                unsubscribeFriends = subscribeToFriends(
                    currentUser.uid, 
                    renderFriendList
                );
            } else {
                customAlert("Error", "Failed to update profile. Please try again.");
            }
        });

        profilePicInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    profilePicPreview.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        sendBtn.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>
